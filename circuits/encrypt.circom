pragma circom 2.1.2;

include "multiplyPoint.circom";
include "onCurve.circom";

template Encrypt () {
    
    signal input M[2];              // message encoded as a point on the curve
    signal input k;                 // secret key nonce
    signal input pk[2];             // public key generated by the receiver

    signal output ke[2];            // ephemeral key
    signal output eM[2];            // encrypted message
    
    assert(pk[0]!= 0 && pk[1]!= 0); 
    
    component onc = OnCurve();      // protect against invalid curve attacks
    onc.p <== pk;
    assert(onc.out);

    signal g[2] <== [1,2];          // alt_bn128 curve generator

    component multiply[2];
    multiply[0] = MultiplyPoint(254);
    multiply[0].p <== g;
    multiply[0].c <== k;
    ke <== multiply[0].out;

    component add = AddPoint();
    multiply[1] = MultiplyPoint(254);
    multiply[1].p <== pk;
    multiply[1].c <== k;
    add.p1 <== multiply[1].out;
    add.p2 <== M;
    
    eM <== add.out;
    
}

//component main { public [ pk ] } = Encrypt();