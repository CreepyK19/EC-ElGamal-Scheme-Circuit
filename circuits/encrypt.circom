pragma circom 2.1.2;

include "../node_modules/circomlib/circuits/comparators.circom";
include "multiplyPoint.circom";
include "onCurve.circom";

template Encrypt () {
    
    signal input M[2];              // message encoded as a point on the curve: M = [x]G
    signal input k;                 // secret key nonce
    signal input pk[2];             // public key generated by the receiver

    signal output ke[2];            // ephemeral key: ke = [k]G
    signal output eM[2];            // encrypted message: eM = M + [k]PK
    
    component isz[2];

    for (var i=0; i<2; i++) {
        isz[i] = IsZero();
        isz[i].in <== pk[i];
    }
    isz[0].out * isz[1].out === 0;  // protect against invalid curve attacks

    component onc[2];

    onc[0] = OnCurve();             // check the public key is point on curve
    onc[0].p <== pk;
    onc[0].out === 1;
    
    onc[1] = OnCurve();             // check the Message is a point on curve
    onc[1].p <== M;
    onc[1].out === 1;
    

    signal g[2] <== [1,2];          // alt_bn128 curve generator

    component multiply[2];
    multiply[0] = MultiplyPoint(254);
    multiply[0].p <== g;
    multiply[0].c <== k;
    ke <== multiply[0].out;

    component add = AddPoint();
    multiply[1] = MultiplyPoint(254);
    multiply[1].p <== pk;
    multiply[1].c <== k;
    add.p1 <== multiply[1].out;
    add.p2 <== M;
    eM <== add.out;
    
}

//component main { public [ pk ] } = Encrypt();